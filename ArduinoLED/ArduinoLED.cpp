// ArduinoLED.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <fstream>
#include <thread>
#include <assert.h>

#include <Windows.h>
#include <fileapi.h>

#include <ArduinoControl.h>

struct Color
{
    uint8_t r;
    uint8_t g;
    uint8_t b;
};

const size_t kStreamBufferSize = 64;

bool gRunning = false;

const std::array<hvk::Color, 8*5> kColors =
{ {
    {255, 1, 1}, {255, 1, 1}, {255, 1, 1}, {255, 1, 1}, {255, 1, 1}, {255, 1, 1}, {255, 1, 1}, {255, 1, 1},
    {190, 1, 60}, {190, 1, 60}, {190, 1, 60}, {190, 1, 60}, {190, 1, 60}, {190, 1, 60}, {190, 1, 60}, {190, 1, 60},
    {130, 1, 120}, {130, 1, 120}, {130, 1, 120}, {130, 1, 120}, {130, 1, 120}, {130, 1, 120}, {130, 1, 120}, {130, 1, 120},
    {70, 1, 180}, {70, 1, 180}, {70, 1, 180}, {70, 1, 180}, {70, 1, 180}, {70, 1, 180}, {70, 1, 180}, {70, 1, 180},
    {1, 1, 255}, {1, 1, 255}, {1, 1, 255}, {1, 1, 255}, {1, 1, 255}, {1, 1, 255}, {1, 1, 255}, {1, 1, 255}
} };

const std::array<hvk::Color, 8*5> kWhites =
{ {
    {255, 255, 255},{255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255},
    {255, 255, 255},{255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255},
    {255, 255, 255},{255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255},
    {255, 255, 255},{255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255},
    {255, 255, 255},{255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}
} };

const std::array<hvk::Color, 8 * 5> kOrange =
{ {
    {255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},
    {255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},
    {255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},
    {255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},
    {255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0},{255, 50, 0}
} };

const std::array<hvk::Color, 8 * 5> kGrey =
{ {
    {50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},
    {50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},
    {50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},
    {50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},
    {50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50},{50, 50, 50}
} };

const std::array<hvk::Color, 8 * 5> kDarkGrey =
{ {
    {25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},
    {25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},
    {25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},
    {25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},
    {25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25},{25, 25, 25}
} };

const std::array<hvk::Color, 8 * 5> kTestGrey =
{ {
    {8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},
    {8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},
    {8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},
    {8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},
    {8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25},{8, 6, 25}
} };

const hvk::Color Red = { 255, 0, 0 };
const hvk::Color Orange = { 255, 128, 0 };
const hvk::Color Yellow = { 255, 255, 0 };
const hvk::Color Lime = { 128, 255, 0 };
const hvk::Color Green = { 0, 255, 0 };
const hvk::Color Sea = { 0, 255, 128 };
const hvk::Color Cyan = { 0, 255, 255 };
const hvk::Color Teal = { 0, 128, 255 };
const hvk::Color Blue = { 0, 0, 255 };
const hvk::Color Violet = { 128, 0, 255 };
const hvk::Color Purple = { 255, 0, 255 };
const hvk::Color Pink = { 255, 0, 128 };

std::array<hvk::Color, 8 * 5> makeColor(const hvk::Color& c)
{
    std::array<hvk::Color, 8 * 5> filled;
    filled.fill(c);
    return filled;
}

int main()
{
    // create stream buffer
    char streamBuffer[kStreamBufferSize];
    memset(streamBuffer, 0, kStreamBufferSize);

    hvk::control::ArduinoController<8, 5> controller;
    controller.Init();

    controller.WritePixels(makeColor(Red));
    Sleep(1000);
    controller.WritePixels(makeColor(Orange));
    Sleep(1000);
    controller.WritePixels(makeColor(Yellow));
    Sleep(1000);
    controller.WritePixels(makeColor(Lime));
    Sleep(1000);
    controller.WritePixels(makeColor(Green));
    Sleep(1000);
    controller.WritePixels(makeColor(Sea));
    Sleep(1000);
    controller.WritePixels(makeColor(Cyan));
    Sleep(1000);
    controller.WritePixels(makeColor(Teal));
    Sleep(1000);
    controller.WritePixels(makeColor(Blue));
    Sleep(1000);
    controller.WritePixels(makeColor(Violet));
    Sleep(1000);
    controller.WritePixels(makeColor(Purple));
    Sleep(1000);
    controller.WritePixels(makeColor(Pink));
    Sleep(1000);
}
